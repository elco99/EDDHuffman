package huffman;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.BitSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dany
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    private ArrayList<node> nodo;
    private ArrayList<node> nodoTmp;
    private ArrayList<String> lista;
    private String word;
    private node root;
    private String finalWord;

    public main() {
        initComponents();
        root = new node();
        word = "";
        finalWord = "";
        lista = new ArrayList();
        nodo = new ArrayList();
        nodoTmp = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comprimir = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        descomprimir = new javax.swing.JButton();
        tf_archivo = new javax.swing.JTextField();
        SeleccionarArchivo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comprimir.setText("Comprimir");
        comprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comprimirMouseClicked(evt);
            }
        });

        salir.setText("Salir");
        salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirMouseClicked(evt);
            }
        });

        descomprimir.setText("Descomprimir");
        descomprimir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descomprimirMouseClicked(evt);
            }
        });

        tf_archivo.setEnabled(false);

        SeleccionarArchivo.setText("Seleccionar");
        SeleccionarArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SeleccionarArchivoMouseClicked(evt);
            }
        });

        jLabel1.setText("Solo para comprimir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(193, 193, 193)
                .addComponent(descomprimir)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(comprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tf_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(SeleccionarArchivo)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SeleccionarArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descomprimir)
                    .addComponent(comprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(salir)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void crearArbol() {
        while (true) {
            String palabra = "";
            if (nodo.size() < 2) {
                break;
            }
            palabra += nodo.get(0) + "" + nodo.get(1);
            int freq = nodo.get(0).getFrecuencia() + nodo.get(1).getFrecuencia();
            node left = nodo.get(0);
            node right = nodo.get(1);
            nodo.remove(0);
            nodo.remove(0);
            nodo.add(new node(right, left, freq, palabra));
            nodo = sort();

        }
        this.root = nodo.get(0);
    }

    public ArrayList<node> sort() {
        for (int i = 0; i < nodo.size(); i++) {
            for (int j = 0; j < nodo.size(); j++) {
                if (nodo.get(i).getFrecuencia() < nodo.get(j).getFrecuencia()) {
                    node tmp = nodo.get(i);
                    nodo.set(i, nodo.get(j));
                    nodo.set(j, tmp);
                }
            }
        }
        return nodo;
    }

    public void Frecuencia(String palabra) {
        String tmp = "";
        nodo = new ArrayList();
        for (int i = 0; i < palabra.length(); i++) {
            if (tmp.contains(palabra.charAt(i) + "")) {
                nodo.get(tmp.indexOf(palabra.charAt(i))).incrementar();
            } else {
                tmp += palabra.charAt(i);
                nodo.add(new node(palabra.charAt(i) + ""));
            }
        }
    }

    public void Tabla(String leaf, node root) {
        if (!root.isLeaf()) {
            if (root.getLetra().contains(leaf)) {
                if (root.getLeftSon().getLetra().contains(leaf)) {
                    word += "0";
                    Tabla(leaf, (node) root.getLeftSon());
                }
                if (root.getRightBro().getLetra().contains(leaf)) {
                    word += "1";
                    Tabla(leaf, root.getRightBro());
                }
            }
        }
    }

    private void comprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprimirMouseClicked
        StringBuilder codigo = new StringBuilder();
        
        for (int i = 0; i < finalWord.length(); i++) {
            String comparar = finalWord.charAt(i) + "";
            for (int j = 0; j < nodoTmp.size(); j++) {
                if (comparar.equals(nodoTmp.get(j).getLetra())) {
                    codigo.append(lista.get(j));
                }
            }
        }
        String codigo_final = codigo.toString();

        BitSet bits = new BitSet(codigo_final.length());
        for (int i = 0; i < codigo_final.length(); i++) {
            if (codigo_final.charAt(i) == '1') {
                bits.set(i);
            }
        }

        File archivo = null;
        FileOutputStream fos = null;
        ObjectOutputStream oos = null;
        try {
            JFileChooser jfc = new JFileChooser();
            int op = jfc.showSaveDialog(jfc);
            if (op == JFileChooser.APPROVE_OPTION) {
                String path = jfc.getSelectedFile() + ".dany";
                archivo = new File(path);
                fos = new FileOutputStream(archivo);
                oos = new ObjectOutputStream(fos);
                oos.writeObject(bits);
                oos.writeObject(root);
                oos.flush();
                fos.close();
                oos.close();

            }
        } catch (Exception ex) {

        }
        nodo = new ArrayList();
        nodoTmp = new ArrayList();
        lista = new ArrayList();
    }//GEN-LAST:event_comprimirMouseClicked

    private void salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_salirMouseClicked

    private void descomprimirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descomprimirMouseClicked
        // TODO add your handling code here:
        nodo = new ArrayList();
        nodoTmp = new ArrayList();
        lista = new ArrayList();
        
        File archivo = null;
        BitSet bits = null;
        String texto = null;
        String txt = "";
        String extension = "";
        JFileChooser jfc = new JFileChooser();
        int op = jfc.showOpenDialog(jfc);
        if (op == JFileChooser.APPROVE_OPTION) {
            archivo = new File(jfc.getSelectedFile().getPath());
            for (int i = 0; i < jfc.getSelectedFile().getPath().length(); i++) {
                if (jfc.getSelectedFile().getPath().charAt(i) == '.') {
                    extension = jfc.getSelectedFile().getPath().substring(i, jfc.getSelectedFile().getPath().length());
                    txt =jfc.getSelectedFile().getPath().substring(0, i);
                }
            }
            try {
                if (!extension.equals(".dany")) {
                    JOptionPane.showMessageDialog(this, "No puede descomprimir este tipo de archivo");
                } else {
                    ObjectInputStream ois = null;
                    FileInputStream fis = null;
                    try {
                        fis = new FileInputStream(archivo);
                        ois = new ObjectInputStream(fis);
                        bits = (BitSet) ois.readObject();
                        root = (node) ois.readObject();
                    } catch (Exception ex) {

                    } finally {
                        try {
                            ois.close();
                            fis.close();
                        } catch (Exception ex) {

                        }
                    }
                }

                node nodes = root;
                texto = "";
                for (int i = 0; i <= bits.length(); i++) {
                    if (!nodes.isLeaf()) {
                        if (!bits.get(i)) {
                            nodes = nodes.getLeftSon();
                        } else if (bits.get(i)) {
                            nodes = nodes.getRightBro();
                        }
                    } else {
                        i--;
                        texto += nodes.getLetra();
                        nodes = root;
                    }
                }
                System.out.println(texto);
                System.out.println("---------------");
                try {
                    File file = new File(txt + " unzip");
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(texto);
                    bw.close();
                } catch (Exception ex) {

                }
            } catch (Exception ex) {

            }
        }
        
        
    }//GEN-LAST:event_descomprimirMouseClicked

    private void SeleccionarArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeleccionarArchivoMouseClicked
        // TODO add your handling code here:
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        finalWord = "";
        word = "";
        root = new node();
        try {
            JFileChooser jfc = new JFileChooser();
            int op = jfc.showOpenDialog(jfc);
            if (op == JFileChooser.APPROVE_OPTION) {
                nodo = new ArrayList();
                archivo = jfc.getSelectedFile();
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);
                tf_archivo.setText(jfc.getSelectedFile().getPath());
                try {
                    String linea = "";
                    while ((linea = br.readLine()) != null) {
                        finalWord += linea;
                        finalWord += "\r\n";
                    }
                } catch (Exception ex) {

                } finally {
                    try {
                        br.close();
                        fr.close();
                    } catch (Exception ex) {

                    }
                }

                Frecuencia(finalWord);
                nodo = sort();
                nodoTmp = new ArrayList();

                for (int i = 0; i < nodo.size(); i++) {
                    nodoTmp.add(new node(nodo.get(i).getLeftSon(), nodo.get(i).getRightBro(), nodo.get(i).getFrecuencia(), nodo.get(i).getLetra()));
                }
                crearArbol();
                lista = new ArrayList();
                for (int i = 0; i < nodoTmp.size(); i++) {
                    word = "";
                    Tabla(nodoTmp.get(i).getLetra(), root);
                    this.lista.add(word);
                }

            }

        } catch (Exception ex) {
        }
    }//GEN-LAST:event_SeleccionarArchivoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SeleccionarArchivo;
    private javax.swing.JButton comprimir;
    private javax.swing.JButton descomprimir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton salir;
    private javax.swing.JTextField tf_archivo;
    // End of variables declaration//GEN-END:variables
}
